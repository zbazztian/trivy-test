#Tue Apr 26 12:30:00 BST 2016
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Declarations/TooManyParameters.ql"\n={"name"\:"Function with too many parameters","description"\:"Functions with many parameters are hard to read and hard to use.","helpURL"\:"\\u003croot\\u003e/Readability/Declarations/TooManyParameters.ql.html","path"\:"\\u003croot\\u003e/Readability/Declarations/TooManyParameters.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Complexity/FCyclomaticComplexity.ql"\n={"name"\:"Average cyclomatic complexity of files","description"\:"The average cyclomatic complexity of the methods in a file.","helpURL"\:"\\u003croot\\u003e/Metrics/Complexity/FCyclomaticComplexity.ql.html","path"\:"\\u003croot\\u003e/Metrics/Complexity/FCyclomaticComplexity.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Spring/MissingParentBean.ql"\n={"name"\:"Beans sharing similar properties","description"\:"Beans that share similar properties exhibit unnecessary repetition in the bean definitions and make the system\\u0027s architecture more difficult to see.","helpURL"\:"\\u003croot\\u003e/Frameworks/Spring/MissingParentBean.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Spring/MissingParentBean.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Duplicate\ Code/DuplicateToplevel.ql"\n={"name"\:"Duplicate script","description"\:"There is another script that shares a lot of code with this script. Consider combining the two scripts to improve maintainability.","helpURL"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/DuplicateToplevel.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/DuplicateToplevel.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Serialization/TransientNotSerializable.ql"\n={"name"\:"Transient field in non-serializable class","description"\:"Using the \\u0027transient\\u0027 field modifier in non-serializable classes has no effect.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/TransientNotSerializable.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/TransientNotSerializable.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Serialization/NonSerializableField.ql"\n={"name"\:"Non-serializable field","description"\:"A non-transient field in a serializable class must also be serializable otherwise it causes the class to fail to serialize with a \\u0027NotSerializableException\\u0027.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/NonSerializableField.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/NonSerializableField.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-134/ExternallyControlledFormatString.ql"\n={"name"\:"Use of externally-controlled format string (CWE-134)","description"\:"Using external input in format strings can lead to exceptions or information leaks.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-134/ExternallyControlledFormatString.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-134/ExternallyControlledFormatString.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Declarations/LocalShadowsFieldConfusing.ql"\n={"name"\:"Possible confusion of local and field","description"\:"A method in which a variable is declared with the same name as a field is difficult to understand.","helpURL"\:"\\u003croot\\u003e/Readability/Declarations/LocalShadowsFieldConfusing.ql.html","path"\:"\\u003croot\\u003e/Readability/Declarations/LocalShadowsFieldConfusing.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Garbage\ collection/FinalizerNullsFields.ql"\n={"name"\:"Finalizer nulls fields","description"\:"Setting fields to \\u0027null\\u0027 in a finalizer does not cause the object to be collected by the garbage collector any earlier, and may adversely affect performance.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Garbage collection/FinalizerNullsFields.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Garbage collection/FinalizerNullsFields.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/API\ Misuse/StartInConstructor.ql"\n={"name"\:"Start of thread in constructor","description"\:"Starting a thread within a constructor may cause the thread to start before any subclass constructor has completed its initialization, causing unexpected results.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/API Misuse/StartInConstructor.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/API Misuse/StartInConstructor.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Logic\ Errors/IteratorRemoveMayFail.ql"\n={"name"\:"Call to Iterator.remove may fail","description"\:"Attempting to invoke \\u0027Iterator.remove\\u0027 on an iterator over a collection that does not support element removal causes a runtime exception.","helpURL"\:"\\u003croot\\u003e/Correctness/Logic Errors/IteratorRemoveMayFail.ql.html","path"\:"\\u003croot\\u003e/Correctness/Logic Errors/IteratorRemoveMayFail.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Encapsulation/AbstractToConcreteCollection.ql"\n={"name"\:"Cast from abstract to concrete collection","description"\:"A cast from an abstract collection to a concrete implementation type makes the code brittle.","helpURL"\:"\\u003croot\\u003e/Maintainability/Encapsulation/AbstractToConcreteCollection.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Encapsulation/AbstractToConcreteCollection.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Coupling/TSelfContainedness.ql"\n={"name"\:"Self-containedness of types","description"\:"The percentage of the types on which a type depends for which we have the source code.","helpURL"\:"\\u003croot\\u003e/Metrics/Coupling/TSelfContainedness.ql.html","path"\:"\\u003croot\\u003e/Metrics/Coupling/TSelfContainedness.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Serialization/IncorrectSerialVersionUID.ql"\n={"name"\:"Incorrect serialVersionUID field","description"\:"A \\u0027serialVersionUID\\u0027 field that is declared in a serializable class but is of the wrong type cannot be used by the serialization framework.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/IncorrectSerialVersionUID.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/IncorrectSerialVersionUID.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Expressions/SuspiciousInvocation.ql"\n={"name"\:"Invocation of non-function","description"\:"Trying to invoke a value that is not a function will result in a runtime exception.","helpURL"\:"\\u003croot\\u003e/Correctness/Expressions/SuspiciousInvocation.ql.html","path"\:"\\u003croot\\u003e/Correctness/Expressions/SuspiciousInvocation.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Statements/ReturnOutsideFunction.ql"\n={"name"\:"Return statement outside function","description"\:"A \\u0027return\\u0027 statement appearing outside a function will, in most cases, cause a syntax error at runtime. Even where they are allowed, return statements outside functions can make code harder to read and should be avoided.","helpURL"\:"\\u003croot\\u003e/Correctness/Statements/ReturnOutsideFunction.ql.html","path"\:"\\u003croot\\u003e/Correctness/Statements/ReturnOutsideFunction.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Serialization/NonSerializableComparator.ql"\n={"name"\:"Non-serializable comparator","description"\:"A comparator that is passed to an ordered collection (for example, a treemap) must be serializable, otherwise the collection fails to serialize at run-time.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/NonSerializableComparator.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/NonSerializableComparator.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Declarations/InefficientMethodDefinition.ql"\n={"name"\:"Inefficient method definition","description"\:"Defining methods in the constructor (as opposed to adding them to the prototype object) is inefficient.","helpURL"\:"\\u003croot\\u003e/Maintainability/Declarations/InefficientMethodDefinition.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Declarations/InefficientMethodDefinition.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-190/ArithmeticWithExtremeValues.ql"\n={"name"\:"Use of extreme values in arithmetic expression (CWE-190)","description"\:"If a variable is assigned the maximum or minimum value for that variable\\u0027s type and is then used in an arithmetic expression, this may result in an overflow.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-190/ArithmeticWithExtremeValues.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-190/ArithmeticWithExtremeValues.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Coupling/FSelfContainedness.ql"\n={"name"\:"Self-containedness of files","description"\:"The percentage of the types on which a compilation unit depends for which we have the source code.","helpURL"\:"\\u003croot\\u003e/Metrics/Coupling/FSelfContainedness.ql.html","path"\:"\\u003croot\\u003e/Metrics/Coupling/FSelfContainedness.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Result\ Checking/ReturnValueIgnored.ql"\n={"name"\:"Method result ignored","description"\:"If most of the calls to a method use the return value of that method, the calls that do not check the return value may be mistakes.","helpURL"\:"\\u003croot\\u003e/Correctness/Result Checking/ReturnValueIgnored.ql.html","path"\:"\\u003croot\\u003e/Correctness/Result Checking/ReturnValueIgnored.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Extensibility/CallsToSystemExit.ql"\n={"name"\:"Forcible JVM termination","description"\:"Calling \\u0027System.exit\\u0027, \\u0027Runtime.halt\\u0027, or \\u0027Runtime.exit\\u0027 may make code harder to reuse and prevent important cleanup steps from running.","helpURL"\:"\\u003croot\\u003e/Maintainability/Extensibility/CallsToSystemExit.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Extensibility/CallsToSystemExit.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Magic\ Constants/MagicNumbersUseConstant.ql"\n={"name"\:"Magic numbers\: use defined constant","description"\:"A magic number, which is used instead of an existing named constant, makes code less readable and maintainable.","helpURL"\:"\\u003croot\\u003e/Readability/Magic Constants/MagicNumbersUseConstant.ql.html","path"\:"\\u003croot\\u003e/Readability/Magic Constants/MagicNumbersUseConstant.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Complexity/CNumberOfParameters.ql"\n={"name"\:"Number of parameters to methods","description"\:"The number of parameters of a method or constructor.","helpURL"\:"\\u003croot\\u003e/Metrics/Complexity/CNumberOfParameters.ql.html","path"\:"\\u003croot\\u003e/Metrics/Complexity/CNumberOfParameters.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Spring/NoBeanDescription.ql"\n={"name"\:"This bean does not have a description element","description"\:"Adding \\u0027description\\u0027 elements to a Spring XML bean definition file is good practice.","helpURL"\:"\\u003croot\\u003e/Frameworks/Spring/NoBeanDescription.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Spring/NoBeanDescription.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/API\ Misuse/EmptyRunMethodInThread.ql"\n={"name"\:"Useless run() method in thread","description"\:"Thread instances that neither get an argument of type \\u0027Runnable\\u0027 passed to their constructor nor override the \\u0027Thread.run\\u0027 method are likely to have no effect.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/API Misuse/EmptyRunMethodInThread.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/API Misuse/EmptyRunMethodInThread.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Expressions/DuplicateCondition.ql"\n={"name"\:"Duplicate \\u0027if\\u0027 condition","description"\:"If two conditions in an \\u0027if\\u0027-\\u0027else if\\u0027 chain are identical, the second condition will never be evaluated.","helpURL"\:"\\u003croot\\u003e/Correctness/Expressions/DuplicateCondition.ql.html","path"\:"\\u003croot\\u003e/Correctness/Expressions/DuplicateCondition.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Duplicate\ Code/DuplicateAnonymous.ql"\n={"name"\:"Duplicate anonymous class","description"\:"Duplicated anonymous classes indicate that refactoring is necessary.","helpURL"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/DuplicateAnonymous.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/DuplicateAnonymous.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/JSLint/InvalidJSLintDirective.ql"\n={"name"\:"Invalid JSLint directive","description"\:"A JSLint directive that has whitespace characters before the directive name is not recognized by JSLint.","helpURL"\:"\\u003croot\\u003e/Frameworks/JSLint/InvalidJSLintDirective.ql.html","path"\:"\\u003croot\\u003e/Frameworks/JSLint/InvalidJSLintDirective.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Logic\ Errors/ContainerSizeCmpZero.ql"\n={"name"\:"Container size compared to zero","description"\:"Comparing the size of a container to zero with this operator will always return the same value.","helpURL"\:"\\u003croot\\u003e/Correctness/Logic Errors/ContainerSizeCmpZero.ql.html","path"\:"\\u003croot\\u003e/Correctness/Logic Errors/ContainerSizeCmpZero.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Expressions/ComparisonWithNaN.ql"\n={"name"\:"Comparison with NaN","description"\:"Arithmetic comparisons with NaN are useless\: nothing is considered to be equal to NaN, not even NaN itself, and similarly nothing is considered greater or less than NaN.","helpURL"\:"\\u003croot\\u003e/Correctness/Expressions/ComparisonWithNaN.ql.html","path"\:"\\u003croot\\u003e/Correctness/Expressions/ComparisonWithNaN.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Abuse/DubiousTypeTestOfThis.ql"\n={"name"\:"Dubious type test of \\u0027this\\u0027","description"\:"Testing whether \\u0027this\\u0027 is an instance of a derived type introduces a dependency cycle between the type of \\u0027this\\u0027 and the target type.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Abuse/DubiousTypeTestOfThis.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Abuse/DubiousTypeTestOfThis.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Coupling/FEfferentCoupling.ql"\n={"name"\:"Outgoing file dependencies","description"\:"The number of compilation units on which a compilation unit depends.","helpURL"\:"\\u003croot\\u003e/Metrics/Coupling/FEfferentCoupling.ql.html","path"\:"\\u003croot\\u003e/Metrics/Coupling/FEfferentCoupling.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Size/FNumberOfInterfaces.ql"\n={"name"\:"Number of interfaces","description"\:"The number of interfaces in a compilation unit.","helpURL"\:"\\u003croot\\u003e/Metrics/Size/FNumberOfInterfaces.ql.html","path"\:"\\u003croot\\u003e/Metrics/Size/FNumberOfInterfaces.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Complexity/CCyclomaticComplexity.ql"\n={"name"\:"Cyclomatic complexity of methods","description"\:"The number of possible execution paths through a method or constructor.","helpURL"\:"\\u003croot\\u003e/Maintainability/Complexity/CCyclomaticComplexity.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Complexity/CCyclomaticComplexity.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Serialization/IncorrectSerializableMethods.ql"\n={"name"\:"Serialization methods do not match required signature","description"\:"A serialized class that implements \\u0027readObject\\u0027 or \\u0027writeObject\\u0027 but does not use the correct signatures causes the default serialization mechanism to be used.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/IncorrectSerializableMethods.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/IncorrectSerializableMethods.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Features/ExpressionClosures.ql"\n={"name"\:"Use of platform-specific language features","description"\:"Non-standard language features such as expression closures or let expressions make it harder to reuse code.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Features/ExpressionClosures.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Features/ExpressionClosures.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Arithmetic/MultiplyRemainder.ql"\n={"name"\:"Multiplication of remainder","description"\:"Using the remainder operator with the multiplication operator without adding parentheses to clarify precedence may cause confusion.","helpURL"\:"\\u003croot\\u003e/Correctness/Arithmetic/MultiplyRemainder.ql.html","path"\:"\\u003croot\\u003e/Correctness/Arithmetic/MultiplyRemainder.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Size/CNumberOfStatements.ql"\n={"name"\:"Number of statements in methods","description"\:"The number of statements in a method or constructor.","helpURL"\:"\\u003croot\\u003e/Metrics/Size/CNumberOfStatements.ql.html","path"\:"\\u003croot\\u003e/Metrics/Size/CNumberOfStatements.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Encapsulation/ExposeRepresentation.ql"\n={"name"\:"Exposing internal representation","description"\:"An object that accidentally exposes its internal representation may allow the object\\u0027s fields to be modified in ways that the object is not prepared to handle.","helpURL"\:"\\u003croot\\u003e/Maintainability/Encapsulation/ExposeRepresentation.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Encapsulation/ExposeRepresentation.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Duplicate\ Code/MostlyDuplicateMethod.ql"\n={"name"\:"Mostly duplicate method","description"\:"Methods in which most of the lines are duplicated in another method make code more difficult to understand and introduce a risk of changes being made to only one copy.","helpURL"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/MostlyDuplicateMethod.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/MostlyDuplicateMethod.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/SynchSetUnsynchGet.ql"\n={"name"\:"Inconsistent synchronization of getter and setter","description"\:"If a class has a synchronized \\u0027set\\u0027 method, and a similarly-named \\u0027get\\u0027 method is not also synchronized, calls to the \\u0027get\\u0027 method may not return a consistent state for the object.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/SynchSetUnsynchGet.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/SynchSetUnsynchGet.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Expressions/AssignmentInReturn.ql"\n={"name"\:"Assignment in return statement","description"\:"Assigning to a local variable in a \\u0027return\\u0027 statement has no effect.","helpURL"\:"\\u003croot\\u003e/Readability/Expressions/AssignmentInReturn.ql.html","path"\:"\\u003croot\\u003e/Readability/Expressions/AssignmentInReturn.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Extensibility/StaticFieldWrittenByInstance.ql"\n={"name"\:"Static field written by instance method","description"\:"Writing to a static field from an instance method is prone to race conditions unless you use synchronization. In addition, it makes it difficult to keep the static state consistent and affects code readability.","helpURL"\:"\\u003croot\\u003e/Maintainability/Extensibility/StaticFieldWrittenByInstance.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Extensibility/StaticFieldWrittenByInstance.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Cloning/MissingCallToSuperClone.ql"\n={"name"\:"Missing super clone","description"\:"A \\u0027clone\\u0027 method that is overridden in a subclass, and that does not itself call \\u0027super.clone\\u0027, causes calls to the subclass\\u0027s \\u0027clone\\u0027 method to return an object of the wrong type.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Cloning/MissingCallToSuperClone.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Cloning/MissingCallToSuperClone.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Types/TypeVarExtendsFinalType.ql"\n={"name"\:"Type bound extends a final class","description"\:"If \\u0027C\\u0027 is a final class, a type bound such as \\u0027? extends C\\u0027 is confusing because it implies that \\u0027C\\u0027 has subclasses, but a final class has no subclasses.","helpURL"\:"\\u003croot\\u003e/Readability/Types/TypeVarExtendsFinalType.ql.html","path"\:"\\u003croot\\u003e/Readability/Types/TypeVarExtendsFinalType.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Equality/InconsistentEqualsHashCode.ql"\n={"name"\:"Inconsistent equals and hashCode","description"\:"If a class overrides only one of \\u0027equals\\u0027 and \\u0027hashCode\\u0027, it may mean that \\u0027equals\\u0027 and \\u0027hashCode\\u0027 are inconsistent.","helpURL"\:"\\u003croot\\u003e/Correctness/Equality/InconsistentEqualsHashCode.ql.html","path"\:"\\u003croot\\u003e/Correctness/Equality/InconsistentEqualsHashCode.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Strings/MissingLocaleArgument.ql"\n={"name"\:"Missing Locale parameter to toUpperCase() or toLowerCase()","description"\:"Calling \\u0027String.toUpperCase()\\u0027 or \\u0027String.toLowerCase()\\u0027 without specifying the locale may cause unexpected results for certain default locales.","helpURL"\:"\\u003croot\\u003e/Frameworks/Strings/MissingLocaleArgument.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Strings/MissingLocaleArgument.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Abuse/DubiousDowncastOfThis.ql"\n={"name"\:"Dubious downcast of \\u0027this\\u0027","description"\:"Casting \\u0027this\\u0027 to a derived type introduces a dependency cycle between the type of \\u0027this\\u0027 and the target type.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Abuse/DubiousDowncastOfThis.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Abuse/DubiousDowncastOfThis.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Declarations/ClobberingVarInit.ql"\n={"name"\:"Conflicting variable initialization","description"\:"If a variable is declared and initialized twice inside the same variable declaration statement, the second initialization immediately overwrites the first one.","helpURL"\:"\\u003croot\\u003e/Correctness/Declarations/ClobberingVarInit.ql.html","path"\:"\\u003croot\\u003e/Correctness/Declarations/ClobberingVarInit.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Declarations/DeadStoreOfGlobal.ql"\n={"name"\:"Useless assignment to global variable","description"\:"An assignment to a global variable that is never used has no effect.","helpURL"\:"\\u003croot\\u003e/Correctness/Declarations/DeadStoreOfGlobal.ql.html","path"\:"\\u003croot\\u003e/Correctness/Declarations/DeadStoreOfGlobal.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Cloning/MissingMethodClone.ql"\n={"name"\:"No clone method","description"\:"A class that implements \\u0027Cloneable\\u0027 but does not override the \\u0027clone\\u0027 method will have undesired behavior.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Cloning/MissingMethodClone.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Cloning/MissingMethodClone.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Serialization/NonSerializableInnerClass.ql"\n={"name"\:"Serializable inner class of non-serializable class","description"\:"A class that is serializable with an enclosing class that is not serializable causes serialization to fail.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/NonSerializableInnerClass.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/NonSerializableInnerClass.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/Thread\ Safety/LazyInitStaticField.ql"\n={"name"\:"Incorrect lazy initialization of a static field","description"\:"Initializing a static field without synchronization can be problematic in a multi-threaded context.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/Thread Safety/LazyInitStaticField.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/Thread Safety/LazyInitStaticField.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Size/TNumberOfStatements.ql"\n={"name"\:"Number of statements in types","description"\:"The number of statements in the methods and constructors of a type.","helpURL"\:"\\u003croot\\u003e/Metrics/Size/TNumberOfStatements.ql.html","path"\:"\\u003croot\\u003e/Metrics/Size/TNumberOfStatements.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Exceptions/FinallyMayNotComplete.ql"\n={"name"\:"Finally block may not complete normally","description"\:"A \\u0027finally\\u0027 block that runs because an exception has been thrown, and that does not complete normally, causes the exception to disappear silently.","helpURL"\:"\\u003croot\\u003e/Correctness/Exceptions/FinallyMayNotComplete.ql.html","path"\:"\\u003croot\\u003e/Correctness/Exceptions/FinallyMayNotComplete.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Expressions/MisspelledIdentifier.ql"\n={"name"\:"Misspelled identifier","description"\:"Misspelled identifiers make code harder to read and understand.","helpURL"\:"\\u003croot\\u003e/Readability/Expressions/MisspelledIdentifier.ql.html","path"\:"\\u003croot\\u003e/Readability/Expressions/MisspelledIdentifier.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/Thread\ Safety/DateFormatThreadUnsafe.ql"\n={"name"\:"Thread-unsafe use of DateFormat","description"\:"Static fields of type \\u0027DateFormat\\u0027 (or its descendants) should be avoided because the class \\u0027DateFormat\\u0027 is not thread-safe.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/Thread Safety/DateFormatThreadUnsafe.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/Thread Safety/DateFormatThreadUnsafe.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Statements/ReturnAssignsLocal.ql"\n={"name"\:"Return statement assigns local variable","description"\:"An assignment to a local variable in a return statement is useless, since the variable will immediately go out of scope and its value is lost.","helpURL"\:"\\u003croot\\u003e/Readability/Statements/ReturnAssignsLocal.ql.html","path"\:"\\u003croot\\u003e/Readability/Statements/ReturnAssignsLocal.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Serialization/ReadResolveObject.ql"\n={"name"\:"ReadResolve must have Object return type, not void","description"\:"An implementation of \\u0027readResolve\\u0027 that does not have the signature that is expected by the Java serialization framework is not recognized by the serialization mechanism.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/ReadResolveObject.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/ReadResolveObject.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Equality/MissingInstanceofInEquals.ql"\n={"name"\:"Equals method does not inspect argument type","description"\:"An implementation of \\u0027equals\\u0027 that does not check the type of its argument may lead to failing casts.","helpURL"\:"\\u003croot\\u003e/Correctness/Equality/MissingInstanceofInEquals.ql.html","path"\:"\\u003croot\\u003e/Correctness/Equality/MissingInstanceofInEquals.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Coupling/InappropriateIntimacy.ql"\n={"name"\:"Inappropriate Intimacy","description"\:"Two otherwise-unrelated classes that share too much information about each other are difficult to maintain, change and understand.","helpURL"\:"\\u003croot\\u003e/Maintainability/Coupling/InappropriateIntimacy.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Coupling/InappropriateIntimacy.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-327/BrokenCryptoAlgorithm.ql"\n={"name"\:"Use of a broken or risky cryptographic algorithm (CWE-327)","description"\:"Using broken or weak cryptographic algorithms can allow an attacker to compromise security.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-327/BrokenCryptoAlgorithm.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-327/BrokenCryptoAlgorithm.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Magic\ Constants/MagicConstantsNumbers.ql"\n={"name"\:"Magic numbers","description"\:"A magic number makes code less readable and maintainable.","helpURL"\:"\\u003croot\\u003e/Readability/Magic Constants/MagicConstantsNumbers.ql.html","path"\:"\\u003croot\\u003e/Readability/Magic Constants/MagicConstantsNumbers.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/JSLint/MalformedJSLintDirective.ql"\n={"name"\:"Malformed JSLint directive","description"\:"A malformed JSLint directive will be rejected by JSLint, and may be either rejected or ignored by other tools.","helpURL"\:"\\u003croot\\u003e/Frameworks/JSLint/MalformedJSLintDirective.ql.html","path"\:"\\u003croot\\u003e/Frameworks/JSLint/MalformedJSLintDirective.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Equality/CovariantCompareTo.ql"\n={"name"\:"Overloaded compareTo","description"\:"Defining \\u0027Comparable.compareTo\\u0027, where the parameter of \\u0027compareTo\\u0027 is not of the appropriate type, overloads \\u0027compareTo\\u0027 instead of overriding it.","helpURL"\:"\\u003croot\\u003e/Correctness/Equality/CovariantCompareTo.ql.html","path"\:"\\u003croot\\u003e/Correctness/Equality/CovariantCompareTo.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/InconsistentAccess.ql"\n={"name"\:"Inconsistent synchronization for field","description"\:"If a field is mostly accessed in a synchronized context, but occasionally accessed in a non-synchronized way, the non-synchronized accesses may lead to race conditions.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/InconsistentAccess.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/InconsistentAccess.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Useless\ Code/WriteOnlyContainer.ql"\n={"name"\:"Container contents are never accessed","description"\:"A collection or map whose contents are never queried or accessed is useless.","helpURL"\:"\\u003croot\\u003e/Maintainability/Useless Code/WriteOnlyContainer.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Useless Code/WriteOnlyContainer.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Equality/DefineEqualsWhenAddingFields.ql"\n={"name"\:"Inherited equals() in subclass with added fields","description"\:"If a class overrides \\u0027Object.equals\\u0027, and a subclass defines additional fields to those it inherits but does not re-define \\u0027equals\\u0027, the results of \\u0027equals\\u0027 may be wrong.","helpURL"\:"\\u003croot\\u003e/Correctness/Equality/DefineEqualsWhenAddingFields.ql.html","path"\:"\\u003croot\\u003e/Correctness/Equality/DefineEqualsWhenAddingFields.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Statements/MisleadingIndentationAfterControlStmt.ql"\n={"name"\:"Misleading indentation after control statement","description"\:"The body of a control statement should have appropriate indentation to clarify which statements it controls and which ones it does not control.","helpURL"\:"\\u003croot\\u003e/Correctness/Statements/MisleadingIndentationAfterControlStmt.ql.html","path"\:"\\u003croot\\u003e/Correctness/Statements/MisleadingIndentationAfterControlStmt.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Logic\ Errors/NoNonFinalInConstructor.ql"\n={"name"\:"Non-final method invocation in constructor","description"\:"If a constructor calls a method that is overridden in a subclass, the result can be unpredictable.","helpURL"\:"\\u003croot\\u003e/Correctness/Logic Errors/NoNonFinalInConstructor.ql.html","path"\:"\\u003croot\\u003e/Correctness/Logic Errors/NoNonFinalInConstructor.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Expressions/WhitespaceContradictsPrecedence.ql"\n={"name"\:"Whitespace contradicts operator precedence","description"\:"Nested expressions where the formatting contradicts the grouping enforced by operator precedence are difficult to read and may even indicate a bug.","helpURL"\:"\\u003croot\\u003e/Readability/Expressions/WhitespaceContradictsPrecedence.ql.html","path"\:"\\u003croot\\u003e/Readability/Expressions/WhitespaceContradictsPrecedence.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Duplicate\ Code/DuplicateFunction.ql"\n={"name"\:"Duplicate function","description"\:"There is another function that shares a lot of code with this function. Extract the common parts to a shared utility function to improve maintainability.","helpURL"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/DuplicateFunction.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/DuplicateFunction.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Expressions/RedundantExpression.ql"\n={"name"\:"Identical operands","description"\:"Passing identical, or seemingly identical, operands to an operator such as subtraction or conjunction may indicate a typo; even if it is intentional, it makes the code hard to read.","helpURL"\:"\\u003croot\\u003e/Correctness/Expressions/RedundantExpression.ql.html","path"\:"\\u003croot\\u003e/Correctness/Expressions/RedundantExpression.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/Waiting/CallsToConditionWait.ql"\n={"name"\:"Wait on condition","description"\:"Calling \\u0027wait\\u0027 on a \\u0027Condition\\u0027 interface may result in unexpected behavior and is probably a typographical error.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/Waiting/CallsToConditionWait.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/Waiting/CallsToConditionWait.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Duplicate\ Code/MostlyDuplicateClass.ql"\n={"name"\:"Mostly duplicate class","description"\:"Classes in which most of the methods are duplicated in another class make code more difficult to understand and introduce a risk of changes being made to only one copy.","helpURL"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/MostlyDuplicateClass.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/MostlyDuplicateClass.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Strings/ArrayStringAppend.ql"\n={"name"\:"Array in String append","description"\:"Appending an array to a string, without first converting the array to a string, produces unreadable results.","helpURL"\:"\\u003croot\\u003e/Frameworks/Strings/ArrayStringAppend.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Strings/ArrayStringAppend.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-311/UseSSLSocketFactories.ql"\n={"name"\:"Failure to use SSL socket factories (CWE-311)","description"\:"Connections that are specified by non-SSL socket factories can be intercepted by third parties.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-311/UseSSLSocketFactories.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-311/UseSSLSocketFactories.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Complexity/TPercentageOfComplexCode.ql"\n={"name"\:"Percentage of complex code in types","description"\:"The percentage of a type\\u0027s code that is part of a complex method.","helpURL"\:"\\u003croot\\u003e/Metrics/Complexity/TPercentageOfComplexCode.ql.html","path"\:"\\u003croot\\u003e/Metrics/Complexity/TPercentageOfComplexCode.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Logic\ Errors/CompareIdenticalValues.ql"\n={"name"\:"Comparison of identical values","description"\:"If the same expression occurs on both sides of a comparison operator, the operator is redundant, and probably indicates a mistake.","helpURL"\:"\\u003croot\\u003e/Correctness/Logic Errors/CompareIdenticalValues.ql.html","path"\:"\\u003croot\\u003e/Correctness/Logic Errors/CompareIdenticalValues.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Regular\ Expressions/DuplicateCharacterInCharacterClass.ql"\n={"name"\:"Duplicate character in character class","description"\:"If a character class in a regular expression contains the same character twice, this may indicate a bug.","helpURL"\:"\\u003croot\\u003e/Correctness/Regular Expressions/DuplicateCharacterInCharacterClass.ql.html","path"\:"\\u003croot\\u003e/Correctness/Regular Expressions/DuplicateCharacterInCharacterClass.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Features/DebuggerStatement.ql"\n={"name"\:"Use of debugger statement","description"\:"The \\u0027debugger\\u0027 statement should not be used in production code.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Features/DebuggerStatement.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Features/DebuggerStatement.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Coupling/FLinesOfDuplicatedCode.ql"\n={"name"\:"Duplicated lines in files","description"\:"The number of lines in a file, including code, comment and whitespace lines, which are duplicated in at least one other place.","helpURL"\:"\\u003croot\\u003e/Metrics/Coupling/FLinesOfDuplicatedCode.ql.html","path"\:"\\u003croot\\u003e/Metrics/Coupling/FLinesOfDuplicatedCode.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Swing/BadlyOverriddenAdapter.ql"\n={"name"\:"Bad implementation of an event Adapter","description"\:"In a class that extends a Swing or Abstract Window Toolkit event adapter, an event handler that does not have exactly the same name as the event handler that it overrides means that the overridden event handler is not called.","helpURL"\:"\\u003croot\\u003e/Frameworks/Swing/BadlyOverriddenAdapter.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Swing/BadlyOverriddenAdapter.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Useless\ Code/ReadOnlyContainer.ql"\n={"name"\:"Container contents are never initialized","description"\:"Querying the contents of a collection or map that is never initialized is not normally useful.","helpURL"\:"\\u003croot\\u003e/Maintainability/Useless Code/ReadOnlyContainer.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Useless Code/ReadOnlyContainer.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Files/FNumberOfStatements.ql"\n={"name"\:"Number of statements in files","description"\:"The number of statements in a file.","helpURL"\:"\\u003croot\\u003e/Metrics/Files/FNumberOfStatements.ql.html","path"\:"\\u003croot\\u003e/Metrics/Files/FNumberOfStatements.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Declarations/ArgumentsRedefined.ql"\n={"name"\:"Arguments redefined","description"\:"The special \\u0027arguments\\u0027 variable can be redefined, but this should be avoided since it makes code hard to read and maintain and may prevent compiler optimizations.","helpURL"\:"\\u003croot\\u003e/Maintainability/Declarations/ArgumentsRedefined.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Declarations/ArgumentsRedefined.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Result\ Checking/InconsistentCallOnResult.ql"\n={"name"\:"Inconsistent operation on return value","description"\:"If the same operation is usually performed on the result of a method call, any cases where it is not performed may indicate resource leaks or other problems.","helpURL"\:"\\u003croot\\u003e/Correctness/Result Checking/InconsistentCallOnResult.ql.html","path"\:"\\u003croot\\u003e/Correctness/Result Checking/InconsistentCallOnResult.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-311/CleartextStorageClass.ql"\n={"name"\:"Cleartext storage of sensitive information using storable class (CWE-311)","description"\:"Storing sensitive information in cleartext can expose it to an attacker.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-311/CleartextStorageClass.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-311/CleartextStorageClass.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Expressions/SuspiciousPropAccess.ql"\n={"name"\:"Property access on null or undefined","description"\:"Trying to access a property of \\"null\\" or \\"undefined\\" will result in a runtime exception.","helpURL"\:"\\u003croot\\u003e/Correctness/Expressions/SuspiciousPropAccess.ql.html","path"\:"\\u003croot\\u003e/Correctness/Expressions/SuspiciousPropAccess.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Declarations/BreakInSwitchCase.ql"\n={"name"\:"Unterminated switch case","description"\:"A \\u0027case\\u0027 statement that does not contain a \\u0027break\\u0027 statement allows execution to \\u0027fall through\\u0027 to the next \\u0027case\\u0027, which may not be intended.","helpURL"\:"\\u003croot\\u003e/Readability/Declarations/BreakInSwitchCase.ql.html","path"\:"\\u003croot\\u003e/Readability/Declarations/BreakInSwitchCase.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Equality/InconsistentCompareTo.ql"\n={"name"\:"Inconsistent compareTo","description"\:"If a class overrides \\u0027compareTo\\u0027 but not \\u0027equals\\u0027, it may mean that \\u0027compareTo\\u0027 and \\u0027equals\\u0027 are inconsistent.","helpURL"\:"\\u003croot\\u003e/Correctness/Equality/InconsistentCompareTo.ql.html","path"\:"\\u003croot\\u003e/Correctness/Equality/InconsistentCompareTo.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-190/ComparisonWithWiderType.ql"\n={"name"\:"Comparison of narrow type with wide type in loop condition (CWE-190)","description"\:"Comparisons between types of different widths in a loop condition can cause the loop to behave unexpectedly.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-190/ComparisonWithWiderType.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-190/ComparisonWithWiderType.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Declarations/AmbiguousOuterSuper.ql"\n={"name"\:"Subtle call to inherited method","description"\:"An unqualified call to a method that exists with the same signature in both a superclass and an outer class is ambiguous.","helpURL"\:"\\u003croot\\u003e/Readability/Declarations/AmbiguousOuterSuper.ql.html","path"\:"\\u003croot\\u003e/Readability/Declarations/AmbiguousOuterSuper.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-113/ResponseSplitting.ql"\n={"name"\:"HTTP response splitting (CWE-113)","description"\:"Writing user input directly to an HTTP header makes code vulnerable to attack by header splitting.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-113/ResponseSplitting.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-113/ResponseSplitting.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Statements/SuspiciousUnusedLoopIterationVariable.ql"\n={"name"\:"Unused loop iteration variable","description"\:"A loop iteration variable is unused, which suggests an error.","helpURL"\:"\\u003croot\\u003e/Correctness/Statements/SuspiciousUnusedLoopIterationVariable.ql.html","path"\:"\\u003croot\\u003e/Correctness/Statements/SuspiciousUnusedLoopIterationVariable.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Logic\ Errors/NestedLoopsSameVariable.ql"\n={"name"\:"Nested loops with same variable","description"\:"Nested loops in which the iteration variable is the same for each loop are difficult to understand.","helpURL"\:"\\u003croot\\u003e/Correctness/Logic Errors/NestedLoopsSameVariable.ql.html","path"\:"\\u003croot\\u003e/Correctness/Logic Errors/NestedLoopsSameVariable.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Spring/UseSetterInjection.ql"\n={"name"\:"Use setter injection instead of constructor injection","description"\:"When using the Spring Framework, using setter injection instead of constructor injection is more flexible, especially when several properties are optional.","helpURL"\:"\\u003croot\\u003e/Frameworks/Spring/UseSetterInjection.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Spring/UseSetterInjection.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Equality/EqualsUsesInstanceOf.ql"\n={"name"\:"Possible inconsistency due to instanceof in equals","description"\:"Implementations of \\u0027equals\\u0027 that use \\u0027instanceof\\u0027 to test the type of the argument and are further overridden in a subclass are likely to violate the \\u0027equals\\u0027 contract.","helpURL"\:"\\u003croot\\u003e/Correctness/Equality/EqualsUsesInstanceOf.ql.html","path"\:"\\u003croot\\u003e/Correctness/Equality/EqualsUsesInstanceOf.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Coupling/TEfferentCoupling.ql"\n={"name"\:"Outgoing type dependencies","description"\:"The number of types on which a class depends.","helpURL"\:"\\u003croot\\u003e/Metrics/Coupling/TEfferentCoupling.ql.html","path"\:"\\u003croot\\u003e/Metrics/Coupling/TEfferentCoupling.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/NonSynchronizedOverride.ql"\n={"name"\:"Non-synchronized override of synchronized method","description"\:"If a synchronized method is overridden in a subclass, and the overriding method is not synchronized, the thread-safety of the subclass may be broken.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/NonSynchronizedOverride.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/NonSynchronizedOverride.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Coupling/FAfferentCoupling.ql"\n={"name"\:"Incoming file dependencies","description"\:"The number of compilation units that depend on a compilation unit.","helpURL"\:"\\u003croot\\u003e/Metrics/Coupling/FAfferentCoupling.ql.html","path"\:"\\u003croot\\u003e/Metrics/Coupling/FAfferentCoupling.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Abuse/ChainedInstanceof.ql"\n={"name"\:"Chain of \\u0027instanceof\\u0027 tests","description"\:"Long sequences of type tests on a variable are are difficult to maintain.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Abuse/ChainedInstanceof.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Abuse/ChainedInstanceof.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Garbage\ collection/CallsToRunFinalizersOnExit.ql"\n={"name"\:"Dangerous runFinalizersOnExit","description"\:"Calling \\u0027System.runFinalizersOnExit\\u0027 or \\u0027Runtime.runFinalizersOnExit\\u0027 may cause finalizers to be run on live objects, leading to erratic behavior or deadlock.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Garbage collection/CallsToRunFinalizersOnExit.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Garbage collection/CallsToRunFinalizersOnExit.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Inefficient\ Code/InefficientKeySetIterator.ql"\n={"name"\:"Inefficient use of key set iterator","description"\:"Iterating through the values of a map using the key set is inefficient.","helpURL"\:"\\u003croot\\u003e/Maintainability/Inefficient Code/InefficientKeySetIterator.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Inefficient Code/InefficientKeySetIterator.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Spring/ParentShouldNotUseAbstractClass.ql"\n={"name"\:"Non-abstract parent beans should not use an abstract class","description"\:"A non-abstract Spring bean that is a parent of other beans and specifies an abstract class causes an error during bean instantiation.","helpURL"\:"\\u003croot\\u003e/Frameworks/Spring/ParentShouldNotUseAbstractClass.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Spring/ParentShouldNotUseAbstractClass.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Declarations/RedeclaredVariable.ql"\n={"name"\:"Redeclared variable","description"\:"Declaring the same variable twice is confusing and may even suggest a latent bug.","helpURL"\:"\\u003croot\\u003e/Readability/Declarations/RedeclaredVariable.ql.html","path"\:"\\u003croot\\u003e/Readability/Declarations/RedeclaredVariable.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Magic\ Constants/MagicStringsUseConstant.ql"\n={"name"\:"Magic strings\: use defined constant","description"\:"A magic string, which is used instead of an existing named constant, makes code less readable and maintainable.","helpURL"\:"\\u003croot\\u003e/Readability/Magic Constants/MagicStringsUseConstant.ql.html","path"\:"\\u003croot\\u003e/Readability/Magic Constants/MagicStringsUseConstant.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Arithmetic/NoComparisonOnFloats.ql"\n={"name"\:"Equality test on floating point values","description"\:"Equality tests on floating point values may lead to unexpected results.","helpURL"\:"\\u003croot\\u003e/Correctness/Arithmetic/NoComparisonOnFloats.ql.html","path"\:"\\u003croot\\u003e/Correctness/Arithmetic/NoComparisonOnFloats.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Garbage\ collection/GarbageCollection.ql"\n={"name"\:"Explicit garbage collection","description"\:"Triggering garbage collection explicitly may either have no effect or may trigger unnecessary garbage collection.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Garbage collection/GarbageCollection.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Garbage collection/GarbageCollection.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/EmptySynchronizedBlock.ql"\n={"name"\:"Empty synchronized block","description"\:"Empty synchronized blocks may indicate the presence of incomplete code or incorrect synchronization, and may lead to concurrency problems.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/EmptySynchronizedBlock.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/EmptySynchronizedBlock.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Features/ArgumentsCallerCallee.ql"\n={"name"\:"Use of arguments.caller or arguments.callee","description"\:"The properties \\u0027arguments.caller\\u0027 and \\u0027argument.callee\\u0027 have subtle semantics and make code non-modular and hard to maintain. Consequently, they should not be used.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Features/ArgumentsCallerCallee.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Features/ArgumentsCallerCallee.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Expressions/NoAssignInBooleanExprs.ql"\n={"name"\:"Assignment in Boolean expression","description"\:"Assignments in Boolean conditions can be confused with equality tests and make the condition more difficult to understand.","helpURL"\:"\\u003croot\\u003e/Readability/Expressions/NoAssignInBooleanExprs.ql.html","path"\:"\\u003croot\\u003e/Readability/Expressions/NoAssignInBooleanExprs.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Coupling/TEfferentSourceCoupling.ql"\n={"name"\:"Outgoing dependencies to source types","description"\:"The number of source types on which a type depends.","helpURL"\:"\\u003croot\\u003e/Maintainability/Coupling/TEfferentSourceCoupling.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Coupling/TEfferentSourceCoupling.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Duplicate\ Code/MostlyDuplicateFile.ql"\n={"name"\:"Mostly duplicate file","description"\:"Files in which most of the lines are duplicated in another file make code more difficult to understand and introduce a risk of changes being made to only one copy.","helpURL"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/MostlyDuplicateFile.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/MostlyDuplicateFile.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Encapsulation/TSpecialisationIndex.ql"\n={"name"\:"Type specialization index","description"\:"The extent to which a subclass overrides the behavior of its superclasses.","helpURL"\:"\\u003croot\\u003e/Maintainability/Encapsulation/TSpecialisationIndex.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Encapsulation/TSpecialisationIndex.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Complexity/StatementNestingDepth.ql"\n={"name"\:"Statement nesting depth","description"\:"The maximum level of nesting of statements (for example \\u0027if\\u0027, \\u0027for\\u0027, \\u0027while\\u0027) in a method. Blocks are not counted.","helpURL"\:"\\u003croot\\u003e/Metrics/Complexity/StatementNestingDepth.ql.html","path"\:"\\u003croot\\u003e/Metrics/Complexity/StatementNestingDepth.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Logic\ Errors/RemoveTypeMismatch.ql"\n={"name"\:"Type mismatch on remove","description"\:"Calling \\u0027Collection.remove\\u0027 with an object of a different type than that of the collection is unlikely to have any effect.","helpURL"\:"\\u003croot\\u003e/Correctness/Logic Errors/RemoveTypeMismatch.ql.html","path"\:"\\u003croot\\u003e/Correctness/Logic Errors/RemoveTypeMismatch.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Features/ConditionalComments.ql"\n={"name"\:"Conditional comments","description"\:"Conditional comments are an IE-specific feature and not portable.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Features/ConditionalComments.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Features/ConditionalComments.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Declarations/DefaultArgumentReferencesNestedFunction.ql"\n={"name"\:"Default parameter references nested function","description"\:"If a default parameter value references a function that is nested inside the function to which the parameter belongs, a runtime error will occur, since the function is not yet defined at the point where it is referenced.","helpURL"\:"\\u003croot\\u003e/Correctness/Declarations/DefaultArgumentReferencesNestedFunction.ql.html","path"\:"\\u003croot\\u003e/Correctness/Declarations/DefaultArgumentReferencesNestedFunction.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-807/TaintedPermissionsCheck.ql"\n={"name"\:"User-controlled data used in permissions check (CWE-807)","description"\:"Using user-controlled data in a permissions check may result in inappropriate permissions being granted.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-807/TaintedPermissionsCheck.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-807/TaintedPermissionsCheck.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Expressions/DangerousNonCircuitLogic.ql"\n={"name"\:"Dangerous non-short-circuit logic","description"\:"Using a bitwise logical operator on a Boolean where a conditional-and or conditional-or operator is intended is likely to give the wrong result and may cause an exception.","helpURL"\:"\\u003croot\\u003e/Readability/Expressions/DangerousNonCircuitLogic.ql.html","path"\:"\\u003croot\\u003e/Readability/Expressions/DangerousNonCircuitLogic.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Encapsulation/TSpecialisationIndex.ql"\n={"name"\:"Type specialization index","description"\:"The extent to which a subclass overrides the behavior of its superclasses.","helpURL"\:"\\u003croot\\u003e/Metrics/Encapsulation/TSpecialisationIndex.ql.html","path"\:"\\u003croot\\u003e/Metrics/Encapsulation/TSpecialisationIndex.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Inefficient\ Code/InefficientPrimConstructor.ql"\n={"name"\:"Inefficient primitive constructor","description"\:"Calling the constructor of a boxed type is inefficient.","helpURL"\:"\\u003croot\\u003e/Maintainability/Inefficient Code/InefficientPrimConstructor.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Inefficient Code/InefficientPrimConstructor.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/FutileSynchOnField.ql"\n={"name"\:"Futile synchronization on field","description"\:"Synchronizing on a field and updating that field while the lock is held is unlikely to provide the desired thread safety.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/FutileSynchOnField.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/FutileSynchOnField.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Types/TypeVariableHidesType.ql"\n={"name"\:"Type variable hides another type","description"\:"A type variable with the same name as another type that is in scope can cause the two types to be confused.","helpURL"\:"\\u003croot\\u003e/Readability/Types/TypeVariableHidesType.ql.html","path"\:"\\u003croot\\u003e/Readability/Types/TypeVariableHidesType.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/JSDoc/JSDocForNonExistentParameter.ql"\n={"name"\:"JSDoc tag for non-existent parameter","description"\:"A JSDoc \\u0027param\\u0027 tag that refers to a non-existent parameter is confusing and may indicate badly maintained code.","helpURL"\:"\\u003croot\\u003e/Readability/JSDoc/JSDocForNonExistentParameter.ql.html","path"\:"\\u003croot\\u003e/Readability/JSDoc/JSDocForNonExistentParameter.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Features/SemicolonInsertion.ql"\n={"name"\:"Semicolon insertion","description"\:"Code that relies on automatic semicolon insertion is hard to read and maintain.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Features/SemicolonInsertion.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Features/SemicolonInsertion.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Exceptions/PartiallyMaskedCatch.ql"\n={"name"\:"Unreachable catch clause","description"\:"An unreachable \\u0027catch\\u0027 clause may indicate a mistake in exception handling or may be unnecessary.","helpURL"\:"\\u003croot\\u003e/Correctness/Exceptions/PartiallyMaskedCatch.ql.html","path"\:"\\u003croot\\u003e/Correctness/Exceptions/PartiallyMaskedCatch.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/API\ Misuse/NotifyNotNotifyAll.ql"\n={"name"\:"notify instead of notifyAll","description"\:"Calling \\u0027notify\\u0027 instead of \\u0027notifyAll\\u0027 may fail to wake up the correct thread and cannot wake up multiple threads.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/API Misuse/NotifyNotNotifyAll.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/API Misuse/NotifyNotNotifyAll.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-311/CleartextStorageCookie.ql"\n={"name"\:"Cleartext storage of sensitive information in cookie (CWE-311)","description"\:"Storing sensitive information in cleartext can expose it to an attacker.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-311/CleartextStorageCookie.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-311/CleartextStorageCookie.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/NotifyWithoutSynch.ql"\n={"name"\:"Notify on unlocked object","description"\:"Calling \\u0027wait\\u0027, \\u0027notify\\u0027, or \\u0027notifyAll\\u0027 on an object which has not been locked (with a synchronized method or statement) will throw.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/NotifyWithoutSynch.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/Synchronization/NotifyWithoutSynch.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Spring/DontUseConstructorArgIndex.ql"\n={"name"\:"Use constructor-arg types instead of index","description"\:"Using a type name instead of an index number in a Spring \\u0027constructor-arg\\u0027 element improves readability.","helpURL"\:"\\u003croot\\u003e/Frameworks/Spring/DontUseConstructorArgIndex.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Spring/DontUseConstructorArgIndex.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Serialization/MissingVoidConstructorsOnSerializable.ql"\n={"name"\:"Serializable but no void constructor","description"\:"A non-serializable, immediate superclass of a serializable class that does not itself declare an accessible, no-argument constructor causes deserialization to fail.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/MissingVoidConstructorsOnSerializable.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/MissingVoidConstructorsOnSerializable.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Declarations/UniqueParameterNames.ql"\n={"name"\:"Duplicate parameter names","description"\:"If a function has two parameters with the same name, the second parameter shadows the first one, which makes the code hard to understand and error-prone.","helpURL"\:"\\u003croot\\u003e/Correctness/Declarations/UniqueParameterNames.ql.html","path"\:"\\u003croot\\u003e/Correctness/Declarations/UniqueParameterNames.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Logic\ Errors/AnnotationPresentCheck.ql"\n={"name"\:"AnnotationPresent check","description"\:"If an annotation has not been annotated with a \\u0027RUNTIME\\u0027 retention policy, checking for its presence at runtime is not possible.","helpURL"\:"\\u003croot\\u003e/Correctness/Logic Errors/AnnotationPresentCheck.ql.html","path"\:"\\u003croot\\u003e/Correctness/Logic Errors/AnnotationPresentCheck.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Size/TNumberOfCallables.ql"\n={"name"\:"Number of methods","description"\:"The number of methods and constructors in a reference type.","helpURL"\:"\\u003croot\\u003e/Metrics/Size/TNumberOfCallables.ql.html","path"\:"\\u003croot\\u003e/Metrics/Size/TNumberOfCallables.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Performance/ReassignParameterAndUseArguments.ql"\n={"name"\:"Parameter reassigned in function that uses arguments","description"\:"A function that reassigns one of its parameters and also uses the arguments object may not be optimized properly.","helpURL"\:"\\u003croot\\u003e/Maintainability/Performance/ReassignParameterAndUseArguments.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Performance/ReassignParameterAndUseArguments.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Logic\ Errors/ContradictoryTypeChecks.ql"\n={"name"\:"Contradictory type checks","description"\:"Contradictory dynamic type checks in `instanceof` expressions and casts may cause dead code or even runtime errors, and usually indicate a logic error.","helpURL"\:"\\u003croot\\u003e/Correctness/Logic Errors/ContradictoryTypeChecks.ql.html","path"\:"\\u003croot\\u003e/Correctness/Logic Errors/ContradictoryTypeChecks.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Logic\ Errors/ImplementsAnnotation.ql"\n={"name"\:"Annotation is extended or implemented","description"\:"Extending or implementing an annotation is unlikely to be what the programmer intends.","helpURL"\:"\\u003croot\\u003e/Correctness/Logic Errors/ImplementsAnnotation.ql.html","path"\:"\\u003croot\\u003e/Correctness/Logic Errors/ImplementsAnnotation.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Features/ForInComprehensionBlocks.ql"\n={"name"\:"Use of for-in comprehension blocks","description"\:"\\u0027for\\u0027-\\u0027in\\u0027 comprehension blocks are a Mozilla-specific language extension that is no longer supported.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Features/ForInComprehensionBlocks.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Features/ForInComprehensionBlocks.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Regular\ Expressions/BackrefBeforeGroup.ql"\n={"name"\:"Back reference precedes capture group","description"\:"If a back reference precedes the capture group it refers to, it matches the empty string, which is probably not what was expected.","helpURL"\:"\\u003croot\\u003e/Correctness/Regular Expressions/BackrefBeforeGroup.ql.html","path"\:"\\u003croot\\u003e/Correctness/Regular Expressions/BackrefBeforeGroup.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Result\ Checking/IgnoreExceptionalReturn.ql"\n={"name"\:"Ignored error status of call","description"\:"Ignoring an exceptional value that is returned by a method may cause subsequent code to fail.","helpURL"\:"\\u003croot\\u003e/Correctness/Result Checking/IgnoreExceptionalReturn.ql.html","path"\:"\\u003croot\\u003e/Correctness/Result Checking/IgnoreExceptionalReturn.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Spring/UseIdInsteadOfName.ql"\n={"name"\:"Use id instead of name","description"\:"Using \\u0027id\\u0027 instead of \\u0027name\\u0027 to name a Spring bean enables the XML parser to perform additional checks.","helpURL"\:"\\u003croot\\u003e/Frameworks/Spring/UseIdInsteadOfName.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Spring/UseIdInsteadOfName.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Statements/InconsistentReturn.ql"\n={"name"\:"Inconsistent return statements","description"\:"A function should either always return an explicit value, or never return a value.","helpURL"\:"\\u003croot\\u003e/Maintainability/Statements/InconsistentReturn.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Statements/InconsistentReturn.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Logic\ Errors/ContainsTypeMismatch.ql"\n={"name"\:"Type mismatch on contains","description"\:"Calling \\u0027Collection.contains\\u0027 with an object of a different type than that of the collection is unlikely to return \\u0027true\\u0027.","helpURL"\:"\\u003croot\\u003e/Correctness/Logic Errors/ContainsTypeMismatch.ql.html","path"\:"\\u003croot\\u003e/Correctness/Logic Errors/ContainsTypeMismatch.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Garbage\ collection/NullifiedSuperFinalize.ql"\n={"name"\:"Finalizer inconsistency","description"\:"A \\u0027finalize\\u0027 method that does not call \\u003ccode\\u003esuper.finalize\\u003c/code\\u003e may leave cleanup actions undone.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Garbage collection/NullifiedSuperFinalize.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Garbage collection/NullifiedSuperFinalize.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Coupling/TAfferentCoupling.ql"\n={"name"\:"Incoming type dependencies","description"\:"The number of types that depend on a type.","helpURL"\:"\\u003croot\\u003e/Metrics/Coupling/TAfferentCoupling.ql.html","path"\:"\\u003croot\\u003e/Metrics/Coupling/TAfferentCoupling.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Regular\ Expressions/UnmatchableDollar.ql"\n={"name"\:"Unmatchable dollar in regular expression","description"\:"If a dollar assertion \\u0027$\\u0027 appears in a regular expression before another term that cannot match the empty string, then this assertion can never match, so the entire regular expression cannot match any string.","helpURL"\:"\\u003croot\\u003e/Correctness/Regular Expressions/UnmatchableDollar.ql.html","path"\:"\\u003croot\\u003e/Correctness/Regular Expressions/UnmatchableDollar.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Naming/ConfusingOverridesNames.ql"\n={"name"\:"Confusing method names because of overriding","description"\:"A method that would override another method but does not, because the name is capitalized differently, is confusing and may be a mistake.","helpURL"\:"\\u003croot\\u003e/Readability/Naming/ConfusingOverridesNames.ql.html","path"\:"\\u003croot\\u003e/Readability/Naming/ConfusingOverridesNames.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Documentation/FLinesOfCommentedCode.ql"\n={"name"\:"Lines of commented-out code in files","description"\:"The number of lines of commented-out code in a file.","helpURL"\:"\\u003croot\\u003e/Metrics/Documentation/FLinesOfCommentedCode.ql.html","path"\:"\\u003croot\\u003e/Metrics/Documentation/FLinesOfCommentedCode.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Expressions/DuplicateSwitchCase.ql"\n={"name"\:"Duplicate switch case","description"\:"If two cases in a switch statement have the same label, the second case will never be executed.","helpURL"\:"\\u003croot\\u003e/Correctness/Expressions/DuplicateSwitchCase.ql.html","path"\:"\\u003croot\\u003e/Correctness/Expressions/DuplicateSwitchCase.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Magic\ Constants/MagicConstantsString.ql"\n={"name"\:"Magic strings","description"\:"A magic string makes code less readable and maintainable.","helpURL"\:"\\u003croot\\u003e/Readability/Magic Constants/MagicConstantsString.ql.html","path"\:"\\u003croot\\u003e/Readability/Magic Constants/MagicConstantsString.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Features/SetterIgnoresParameter.ql"\n={"name"\:"Setter ignores its parameter","description"\:"A setter function can silently ignore the new value that the property is meant to be set to, but this may result in unexpected behavior and could indicate a bug.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Features/SetterIgnoresParameter.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Features/SetterIgnoresParameter.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Expressions/CompareIdenticalValues.ql"\n={"name"\:"Comparison of identical values","description"\:"If the same expression occurs on both sides of a comparison operator, the operator is redundant, and probably indicates a mistake.","helpURL"\:"\\u003croot\\u003e/Correctness/Expressions/CompareIdenticalValues.ql.html","path"\:"\\u003croot\\u003e/Correctness/Expressions/CompareIdenticalValues.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Statements/InconsistentLoopOrientation.ql"\n={"name"\:"Inconsistent direction of for loop","description"\:"A \\u0027for\\u0027 loop that increments its loop variable but checks it against a lower bound, or decrements its loop variable but checks it against an upper bound, will either stop iterating immediately or keep iterating indefinitely, and is usually indicative of a typo.","helpURL"\:"\\u003croot\\u003e/Correctness/Statements/InconsistentLoopOrientation.ql.html","path"\:"\\u003croot\\u003e/Correctness/Statements/InconsistentLoopOrientation.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Duplicate\ Code/MostlySimilarFile.ql"\n={"name"\:"Mostly similar file","description"\:"Files in which most of the lines are similar to those in another file make code more difficult to understand and introduce a risk of changes being made to only one copy.","helpURL"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/MostlySimilarFile.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Duplicate Code/MostlySimilarFile.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Incomplete\ Code/MissingEnumInSwitch.ql"\n={"name"\:"Missing enum case in switch","description"\:"A \\u0027switch\\u0027 statement that is based on an \\u0027enum\\u0027 type and does not have cases for all the \\u0027enum\\u0027 constants is usually a coding mistake.","helpURL"\:"\\u003croot\\u003e/Readability/Incomplete Code/MissingEnumInSwitch.ql.html","path"\:"\\u003croot\\u003e/Readability/Incomplete Code/MissingEnumInSwitch.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Size/BlockWithTooManyStatements.ql"\n={"name"\:"Block with too many statements","description"\:"A block that contains too many complex statements becomes unreadable and unmaintainable.","helpURL"\:"\\u003croot\\u003e/Maintainability/Size/BlockWithTooManyStatements.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Size/BlockWithTooManyStatements.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Files/FCyclomaticComplexity.ql"\n={"name"\:"Average cyclomatic complexity of files","description"\:"The average cyclomatic complexity of the functions in a file.","helpURL"\:"\\u003croot\\u003e/Metrics/Files/FCyclomaticComplexity.ql.html","path"\:"\\u003croot\\u003e/Metrics/Files/FCyclomaticComplexity.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Duplication/FLinesOfSimilarCode.ql"\n={"name"\:"Number of similar lines in files","description"\:"The number of lines in a file (including code, comment and whitespace lines) occurring in a block of lines that is similar to a block of lines seen somewhere else.","helpURL"\:"\\u003croot\\u003e/Metrics/Duplication/FLinesOfSimilarCode.ql.html","path"\:"\\u003croot\\u003e/Metrics/Duplication/FLinesOfSimilarCode.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-190/ArithmeticUncontrolled.ql"\n={"name"\:"Uncontrolled data in arithmetic expression (CWE-190)","description"\:"Arithmetic operations on uncontrolled data that is not validated can cause overflows.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-190/ArithmeticUncontrolled.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-190/ArithmeticUncontrolled.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-209/StackTraceExposure.ql"\n={"name"\:"Information exposure through a stack trace (CWE-209)","description"\:"Information from a stack trace propagates to an external user. Stack traces can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-209/StackTraceExposure.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-209/StackTraceExposure.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Size/StatementNestingDepth.ql"\n={"name"\:"Statement nesting depth","description"\:"The maximum level of nesting of statements (for example \\u0027if\\u0027, \\u0027for\\u0027, \\u0027while\\u0027) in a method. Blocks are not counted.","helpURL"\:"\\u003croot\\u003e/Maintainability/Size/StatementNestingDepth.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Size/StatementNestingDepth.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Java\ objects/Serialization/MissingVoidConstructorOnExternalizable.ql"\n={"name"\:"Externalizable but no public no-argument constructor","description"\:"A class that implements \\u0027Externalizable\\u0027 but does not have a public no-argument constructor causes an \\u0027InvalidClassException\\u0027 to be thrown.","helpURL"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/MissingVoidConstructorOnExternalizable.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Java objects/Serialization/MissingVoidConstructorOnExternalizable.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Expressions/WhitespaceContradictsPrecedence.ql"\n={"name"\:"Whitespace contradicts operator precedence","description"\:"Nested expressions where the formatting contradicts the grouping enforced by operator precedence are difficult to read and may even indicate a bug.","helpURL"\:"\\u003croot\\u003e/Correctness/Expressions/WhitespaceContradictsPrecedence.ql.html","path"\:"\\u003croot\\u003e/Correctness/Expressions/WhitespaceContradictsPrecedence.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Useless\ Code/InterfaceCannotBeImplemented.ql"\n={"name"\:"Interface cannot be implemented","description"\:"An interface method that is incompatible with a protected method on \\u0027java.lang.Object\\u0027 means that the interface cannot be implemented.","helpURL"\:"\\u003croot\\u003e/Maintainability/Useless Code/InterfaceCannotBeImplemented.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Useless Code/InterfaceCannotBeImplemented.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Statements/UselessConditional.ql"\n={"name"\:"Useless conditional","description"\:"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","helpURL"\:"\\u003croot\\u003e/Correctness/Statements/UselessConditional.ql.html","path"\:"\\u003croot\\u003e/Correctness/Statements/UselessConditional.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Encapsulation/TLackOfCohesionHS.ql"\n={"name"\:"Lack of type cohesion (HS)","description"\:"Lack of cohesion for a type as defined by Henderson-Sellers.","helpURL"\:"\\u003croot\\u003e/Metrics/Encapsulation/TLackOfCohesionHS.ql.html","path"\:"\\u003croot\\u003e/Metrics/Encapsulation/TLackOfCohesionHS.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Language\ Features/SpuriousArguments.ql"\n={"name"\:"Superfluous trailing arguments","description"\:"A function is invoked with extra trailing arguments that are ignored.","helpURL"\:"\\u003croot\\u003e/Correctness/Language Features/SpuriousArguments.ql.html","path"\:"\\u003croot\\u003e/Correctness/Language Features/SpuriousArguments.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Files/FCommentedOutCode.ql"\n={"name"\:"Commented-out code in files","description"\:"Measures the number of commented-out lines of code in each file.","helpURL"\:"\\u003croot\\u003e/Metrics/Files/FCommentedOutCode.ql.html","path"\:"\\u003croot\\u003e/Metrics/Files/FCommentedOutCode.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Declarations/FieldMasksSuperField.ql"\n={"name"\:"Field masks field in super class","description"\:"Hiding a field in a superclass by redeclaring it in a subclass might be unintentional, especially if references to the hidden field are not qualified using \\u0027super\\u0027.","helpURL"\:"\\u003croot\\u003e/Readability/Declarations/FieldMasksSuperField.ql.html","path"\:"\\u003croot\\u003e/Readability/Declarations/FieldMasksSuperField.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Concurrency/API\ Misuse/CallsToRunnableRun.ql"\n={"name"\:"Direct call to a run() method","description"\:"Directly calling a \\u0027Thread\\u0027 object\\u0027s \\u0027run\\u0027 method does not start a separate thread but executes the method within the current thread.","helpURL"\:"\\u003croot\\u003e/Correctness/Concurrency/API Misuse/CallsToRunnableRun.ql.html","path"\:"\\u003croot\\u003e/Correctness/Concurrency/API Misuse/CallsToRunnableRun.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Inefficient\ Code/InefficientEmptyStringTest.ql"\n={"name"\:"Inefficient empty string test","description"\:"Checking a string for equality with an empty string is inefficient.","helpURL"\:"\\u003croot\\u003e/Maintainability/Inefficient Code/InefficientEmptyStringTest.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Inefficient Code/InefficientEmptyStringTest.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Encapsulation/TLackOfCohesionCK.ql"\n={"name"\:"Lack of type cohesion (CK)","description"\:"Lack of cohesion for a class as defined by Chidamber and Kemerer.","helpURL"\:"\\u003croot\\u003e/Metrics/Encapsulation/TLackOfCohesionCK.ql.html","path"\:"\\u003croot\\u003e/Metrics/Encapsulation/TLackOfCohesionCK.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-311/CleartextStorageProperties.ql"\n={"name"\:"Cleartext storage of sensitive information using \\u0027Properties\\u0027 class (CWE-311)","description"\:"Storing sensitive information in cleartext can expose it to an attacker.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-311/CleartextStorageProperties.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-311/CleartextStorageProperties.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Declarations/AssignmentToConst.ql"\n={"name"\:"Assignment to constant","description"\:"Assigning to a variable that is declared \\u0027const\\u0027 has either no effect or leads to a runtime error, depending on the platform.","helpURL"\:"\\u003croot\\u003e/Correctness/Declarations/AssignmentToConst.ql.html","path"\:"\\u003croot\\u003e/Correctness/Declarations/AssignmentToConst.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Encapsulation/TLackOfCohesionCK.ql"\n={"name"\:"Lack of type cohesion (CK)","description"\:"Lack of cohesion for a class as defined by Chidamber and Kemerer.","helpURL"\:"\\u003croot\\u003e/Maintainability/Encapsulation/TLackOfCohesionCK.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Encapsulation/TLackOfCohesionCK.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Naming/ConfusingMethodNames.ql"\n={"name"\:"Confusing method names because of capitalization","description"\:"Methods in the same class whose names differ only in capitalization are confusing.","helpURL"\:"\\u003croot\\u003e/Readability/Naming/ConfusingMethodNames.ql.html","path"\:"\\u003croot\\u003e/Readability/Naming/ConfusingMethodNames.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-327/MaybeBrokenCryptoAlgorithm.ql"\n={"name"\:"Use of a potentially broken or risky cryptographic algorithm (CWE-327)","description"\:"Using broken or weak cryptographic algorithms can allow an attacker to compromise security.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-327/MaybeBrokenCryptoAlgorithm.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-327/MaybeBrokenCryptoAlgorithm.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Expressions/HeterogeneousComparison.ql"\n={"name"\:"Comparison between inconvertible types","description"\:"An equality comparison between two values that cannot be meaningfully converted to the same type will always yield \\u0027false\\u0027, and an inequality comparison will always yield \\u0027true\\u0027.","helpURL"\:"\\u003croot\\u003e/Correctness/Expressions/HeterogeneousComparison.ql.html","path"\:"\\u003croot\\u003e/Correctness/Expressions/HeterogeneousComparison.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Duplication/FLinesOfDuplicatedCode.ql"\n={"name"\:"Duplicate lines in files","description"\:"The number of lines in a file (including code, comment and whitespace lines) occurring in a block of lines that is duplicated at least once somewhere else.","helpURL"\:"\\u003croot\\u003e/Metrics/Duplication/FLinesOfDuplicatedCode.ql.html","path"\:"\\u003croot\\u003e/Metrics/Duplication/FLinesOfDuplicatedCode.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Size/CNumberOfParameters.ql"\n={"name"\:"Number of parameters to methods","description"\:"The number of parameters of a method or constructor.","helpURL"\:"\\u003croot\\u003e/Maintainability/Size/CNumberOfParameters.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Size/CNumberOfParameters.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Encapsulation/TInheritanceDepth.ql"\n={"name"\:"Type inheritance depth","description"\:"The depth of a reference type in the inheritance hierarchy.","helpURL"\:"\\u003croot\\u003e/Metrics/Encapsulation/TInheritanceDepth.ql.html","path"\:"\\u003croot\\u003e/Metrics/Encapsulation/TInheritanceDepth.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Extensibility/GetClassGetResource.ql"\n={"name"\:"Unsafe use of getResource","description"\:"Calling \\u0027this.getClass().getResource()\\u0027 may yield unexpected results if called from a subclass in another package.","helpURL"\:"\\u003croot\\u003e/Maintainability/Extensibility/GetClassGetResource.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Extensibility/GetClassGetResource.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-190/ArithmeticTainted.ql"\n={"name"\:"User-controlled data in arithmetic expression (CWE-190)","description"\:"Arithmetic operations on user-controlled data that is not validated can cause overflows.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-190/ArithmeticTainted.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-190/ArithmeticTainted.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Useless\ Code/NonAssignedFields.ql"\n={"name"\:"Field is never assigned a non-null value","description"\:"A field that is never assigned a value (except possibly \\u0027null\\u0027) just returns the default value when it is read.","helpURL"\:"\\u003croot\\u003e/Maintainability/Useless Code/NonAssignedFields.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Useless Code/NonAssignedFields.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Expressions/ImplicitOperandConversion.ql"\n={"name"\:"Implicit operand conversion","description"\:"Relying on implicit conversion of operands is error-prone and makes code hard to read.","helpURL"\:"\\u003croot\\u003e/Readability/Expressions/ImplicitOperandConversion.ql.html","path"\:"\\u003croot\\u003e/Readability/Expressions/ImplicitOperandConversion.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Inefficient\ Code/ConcatenationInLoops.ql"\n={"name"\:"String concatenation in loop","description"\:"Performing string concatenation in a loop that iterates many times may affect performance.","helpURL"\:"\\u003croot\\u003e/Maintainability/Inefficient Code/ConcatenationInLoops.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Inefficient Code/ConcatenationInLoops.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Declarations/ConflictingFunctions.ql"\n={"name"\:"Conflicting function declarations","description"\:"If two functions with the same name are declared in the same scope, one of the declarations overrides the other without warning. This makes the code hard to read and maintain, and may even lead to platform-dependent behavior.","helpURL"\:"\\u003croot\\u003e/Correctness/Declarations/ConflictingFunctions.ql.html","path"\:"\\u003croot\\u003e/Correctness/Declarations/ConflictingFunctions.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Strings/CallsToStringToString.ql"\n={"name"\:"Useless toString on String","description"\:"Calling \\u0027toString\\u0027 on a string is redundant.","helpURL"\:"\\u003croot\\u003e/Frameworks/Strings/CallsToStringToString.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Strings/CallsToStringToString.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Statements/NestedLoopsSameVariable.ql"\n={"name"\:"Nested loops with same variable","description"\:"Nested loops in which the iteration variable is the same for each loop are difficult to understand.","helpURL"\:"\\u003croot\\u003e/Correctness/Statements/NestedLoopsSameVariable.ql.html","path"\:"\\u003croot\\u003e/Correctness/Statements/NestedLoopsSameVariable.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Regular\ Expressions/EmptyCharacterClass.ql"\n={"name"\:"Empty character class","description"\:"Empty character classes are not normally useful and may indicate a bug.","helpURL"\:"\\u003croot\\u003e/Correctness/Regular Expressions/EmptyCharacterClass.ql.html","path"\:"\\u003croot\\u003e/Correctness/Regular Expressions/EmptyCharacterClass.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Documentation/TPercentageOfComments.ql"\n={"name"\:"Percentage of documentation in types","description"\:"The percentage of a type\\u0027s lines that are comment rather than code.","helpURL"\:"\\u003croot\\u003e/Metrics/Documentation/TPercentageOfComments.ql.html","path"\:"\\u003croot\\u003e/Metrics/Documentation/TPercentageOfComments.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-676/PotentiallyDangerousFunction.ql"\n={"name"\:"Use of potentially dangerous function (CWE-676)","description"\:"Certain standard library routines are dangerous to call.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-676/PotentiallyDangerousFunction.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-676/PotentiallyDangerousFunction.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Functions/FunCyclomaticComplexity.ql"\n={"name"\:"Cyclomatic complexity of functions","description"\:"The cyclomatic complexity of a function.","helpURL"\:"\\u003croot\\u003e/Metrics/Functions/FunCyclomaticComplexity.ql.html","path"\:"\\u003croot\\u003e/Metrics/Functions/FunCyclomaticComplexity.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/JSDoc/UndocumentedParameter.ql"\n={"name"\:"Undocumented parameter","description"\:"If some parameters of a function are documented by JSDoc \\u0027param\\u0027 tags while others are not, this may indicate badly maintained code.","helpURL"\:"\\u003croot\\u003e/Readability/JSDoc/UndocumentedParameter.ql.html","path"\:"\\u003croot\\u003e/Readability/JSDoc/UndocumentedParameter.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/CWE/CWE-807/ConditionalBypass.ql"\n={"name"\:"User-controlled bypass of sensitive method (CWE-807)","description"\:"User-controlled bypassing of sensitive methods may allow attackers to avoid passing through authentication systems.","helpURL"\:"\\u003croot\\u003e/CWE/CWE-807/ConditionalBypass.ql.html","path"\:"\\u003croot\\u003e/CWE/CWE-807/ConditionalBypass.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Activity/HNumberOfRecentChanges.ql"\n={"name"\:"Number of recent file changes","description"\:"Number of recent commits to a file (by version control history).","helpURL"\:"\\u003croot\\u003e/Metrics/Activity/HNumberOfRecentChanges.ql.html","path"\:"\\u003croot\\u003e/Metrics/Activity/HNumberOfRecentChanges.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Spring/UselessPropertyOverride.ql"\n={"name"\:"Useless property override","description"\:"A bean property that overrides the same property in a parent bean, and has the same contents, is useless.","helpURL"\:"\\u003croot\\u003e/Frameworks/Spring/UselessPropertyOverride.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Spring/UselessPropertyOverride.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Useless\ Code/ConstantExpAppearsNonConstant.ql"\n={"name"\:"Expression always evaluates to the same value","description"\:"An expression that always evaluates to the same value, but which has a non-constant subexpression, indicates a mistake.","helpURL"\:"\\u003croot\\u003e/Maintainability/Useless Code/ConstantExpAppearsNonConstant.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Useless Code/ConstantExpAppearsNonConstant.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Exceptions/DroppedExceptions.ql"\n={"name"\:"Discarded exception","description"\:"Dropping an exception may allow an unusual program state to continue without recovery.","helpURL"\:"\\u003croot\\u003e/Correctness/Exceptions/DroppedExceptions.ql.html","path"\:"\\u003croot\\u003e/Correctness/Exceptions/DroppedExceptions.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Language\ Features/YieldInNonGenerator.ql"\n={"name"\:"Yield in non-generator function","description"\:"\\u0027yield\\u0027 should only be used in generator functions.","helpURL"\:"\\u003croot\\u003e/Maintainability/Language Features/YieldInNonGenerator.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Language Features/YieldInNonGenerator.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Equality/IncomparableEquals.ql"\n={"name"\:"Equals on incomparable types","description"\:"Calls of the form \\u0027x.equals(y)\\u0027, where the types of \\u0027x\\u0027 and \\u0027y\\u0027 are incomparable, should always return \\u0027false\\u0027.","helpURL"\:"\\u003croot\\u003e/Correctness/Equality/IncomparableEquals.ql.html","path"\:"\\u003croot\\u003e/Correctness/Equality/IncomparableEquals.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Declarations/UniquePropertyNames.ql"\n={"name"\:"Duplicate property names","description"\:"If an object literal has two properties with the same name, the second property overwrites the first one, which makes the code hard to understand and error-prone.","helpURL"\:"\\u003croot\\u003e/Correctness/Declarations/UniquePropertyNames.ql.html","path"\:"\\u003croot\\u003e/Correctness/Declarations/UniquePropertyNames.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Statements/UnreachableStatement.ql"\n={"name"\:"Unreachable statement","description"\:"Unreachable statements are often indicative of missing code or latent bugs and should be avoided.","helpURL"\:"\\u003croot\\u003e/Correctness/Statements/UnreachableStatement.ql.html","path"\:"\\u003croot\\u003e/Correctness/Statements/UnreachableStatement.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Correctness/Regular\ Expressions/BackrefIntoNegativeLookahead.ql"\n={"name"\:"Back reference into negative lookahead assertion","description"\:"If a back reference refers to a capture group inside a preceding negative lookahead assertion, then the back reference always matches the empty string, which probably indicates a mistake.","helpURL"\:"\\u003croot\\u003e/Correctness/Regular Expressions/BackrefIntoNegativeLookahead.ql.html","path"\:"\\u003croot\\u003e/Correctness/Regular Expressions/BackrefIntoNegativeLookahead.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Naming/ConfusingOverloading.ql"\n={"name"\:"Confusing overloading of methods","description"\:"Overloaded methods that have the same number of parameters, where each pair of corresponding parameter types is convertible by casting or autoboxing, may be confusing.","helpURL"\:"\\u003croot\\u003e/Readability/Naming/ConfusingOverloading.ql.html","path"\:"\\u003croot\\u003e/Readability/Naming/ConfusingOverloading.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Frameworks/Strings/StringBufferCharInit.ql"\n={"name"\:"Character passed to StringBuffer or StringBuilder constructor","description"\:"A character value is passed to the constructor of \\u0027StringBuffer\\u0027 or \\u0027StringBuilder\\u0027. This value will be converted to an integer and interpreted as the buffer\\u0027s initial capacity, which is probably not intended.","helpURL"\:"\\u003croot\\u003e/Frameworks/Strings/StringBufferCharInit.ql.html","path"\:"\\u003croot\\u003e/Frameworks/Strings/StringBufferCharInit.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Readability/Declarations/OverridePackagePrivate.ql"\n={"name"\:"Confusing non-overriding of package-private method","description"\:"A method that appears to override another method but does not, because the declaring classes are in different packages, is potentially confusing.","helpURL"\:"\\u003croot\\u003e/Readability/Declarations/OverridePackagePrivate.ql.html","path"\:"\\u003croot\\u003e/Readability/Declarations/OverridePackagePrivate.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Metrics/Complexity/CCyclomaticComplexity.ql"\n={"name"\:"Cyclomatic complexity of methods","description"\:"The number of possible execution paths through a method or constructor.","helpURL"\:"\\u003croot\\u003e/Metrics/Complexity/CCyclomaticComplexity.ql.html","path"\:"\\u003croot\\u003e/Metrics/Complexity/CCyclomaticComplexity.ql"}
providers|http\://localhost\:8080/mend-test|violationHelp|"\\u003croot\\u003e/Maintainability/Inefficient\ Code/InnerClassCouldBeStatic.ql"\n={"name"\:"Inner class could be static","description"\:"A non-static nested class keeps a reference to the enclosing object, which makes the nested class bigger and may cause a memory leak.","helpURL"\:"\\u003croot\\u003e/Maintainability/Inefficient Code/InnerClassCouldBeStatic.ql.html","path"\:"\\u003croot\\u003e/Maintainability/Inefficient Code/InnerClassCouldBeStatic.ql"}
